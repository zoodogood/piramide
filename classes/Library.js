const GUIDANCES = [
  [`const NEW_YEAR = "31.12";`, "–°—Ç—Ä–æ–∫–∞"],
  [`// ---------------------- { } ----------------------\n–í —ç—Ç–æ–º –º–µ–Ω—é –í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã –Ω–µ–±–æ–ª—å—à–æ–≥–æ –∫–æ–¥–∞,\n–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞.\n–ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–π—Ç–µ –ø–ª–∏—Ç–∫–∏ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏, —á—Ç–æ–±—ã –≤—ã–¥–µ–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —Å–æ–≤–µ—Ç –≤ —Å–∞–º—ã–π –Ω–∏–∑ —Å–ø–∏—Å–∫–∞\n// -------------------------------------------------`, "–í–≤–µ–¥–µ–Ω–∏–µ"],
  [`// –ö–∞–∫ —Å—Ç–æ–∏—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–Ω—è—Ç–∏—è –±–∞—à–Ω–∏ –∏ —Å–ø–∏—Å–∫–∞:\nlet tower = [7, 12, 3];\nlet list = [tower, tower1, tower2];`, "–ú–∞—Å—Å–∏–≤—ã"],
  [`// –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n// –ú–∞—Å—Å–∏–≤ –±–∞—à–µ–Ω\nlet towers = game.list;\nlet secondTower = towers.at(1);\n// –ö–∞–∂–¥–∞—è –±–∞—à–Ω—è ‚Äî –º–∞—Å—Å–∏–≤ –ø–ª–∏—Ç\nlet slab = secondTower.at(0);`, "–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"],
  [`// –ß—Ç–æ–±—ã –ø–µ—Ä–µ–º–µ—â–∞—Ç—å –ø–ª–∏—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–æ–º–µ—Ä–∞ –±–∞—à–µ–Ω –∏ —Ñ—É–Ω–∫—Ü–∏—è \`step\`\ngame.step(1, 2);\n\n// –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–ª–∏—Ç –∏–ª–∏ –±–∞—à–µ–Ω:\nlet size  = game.getGameParams().size;\nlet count = game.getGameParams().count;`, "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ"],
  [`// –í—ã–≤–µ—Å—Ç–∏ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –±–∞—à–Ω–∏\nwhile (i < tower.length){\n  console.log( tower.at(i) );\n  i++;\n}`, "–ü–µ—Ä–µ–±–æ—Ä —Ü–∏–∫–ª–æ–º"],
  [`–¶–ï–õ–¨ ‚Äî –ò—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –≤—Å–µ –ø–ª–∏—Ç–∫–∏ –∏–∑ –ø–µ—Ä–≤–æ–π –±–∞—à–Ω–∏ –≤–æ –≤—Ç–æ—Ä—É—é.\n\n–î–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–ø–æ–º–Ω–∏—Ç–µ –∫–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É –í–∞—Å –µ—Å—Ç—å:\n1. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ ‚Äî game.step\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–ª–∏—Ç –≤ –ø–µ—Ä–≤–æ–π –±–∞—à–Ω–µ ‚Äî game.list.at(0).length\n3. –¶–∏–∫–ª, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–∫–∞ —É—Å–ª–æ–≤–∏–µ "–ø—Ä–∞–≤–¥–∏–≤–æ":\nwhile (x > 0){\n  // –î–µ–π—Å—Ç–≤–∏–µ\n}\n\n–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∫–∞–∫ —É–±—Ä–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞—à–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—è –ø—É–Ω–∫—Ç—ã –≤—ã—à–µ.\n–û—á–∏—Å—Ç–∫–∞ –æ–¥–Ω–æ–π –∏–∑ –±–∞—à–µ–Ω –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –≤ –±—É–¥—É—â–µ–º,\n—á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É ‚Äî —Å–æ–±—Ä–∞—Ç—å –ø–∏—Ä–∞–º–∏–¥–∫—É`, "–†–µ—à–∏—Ç–µ –º–∏–∫—Ä–æ–∑–∞–¥–∞—á—É"],
  [`// –ù–ê–ô–¢–ò –ë–ê–®–ù–Æ –° –ü–õ–ò–¢–ö–û–ô –†–ê–ó–ú–ï–†–û–ú 15;\nfunction findTower(slab){\n  let i = 0;\n  while (i < game.list.length){\n    let tower = game.list.at(i);\n    let isIncludes = tower.includes(slab);\n\n    if (isIncludes)\n      return tower;\n\n    i++;\n  }\n}\n\nlet tower = findTower(15);`, "–ë–∞—à–Ω—è —Å –ø–ª–∏—Ç–∫–æ–π –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"],
  [`console.log("–í—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–Ω–µ—á–Ω–∞—è —Ü–µ–ª—å");\n\nlet array = ["–í –Ω–∞—à–µ–º", "—Å–ª—É—á–∞–µ..."];\nconsole.log(array);\n\n// –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫–æ–Ω—Å–æ–ª—å —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å\n// —á—Ç–æ –∏–∑ —Å–µ–±—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç –¥–∞–Ω–Ω—ã–µ\n// –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–≤–æ–¥—è —Å–ø–∏—Å–æ–∫ –ø–ª–∏—Ç –≤ –±–∞—à–Ω–µ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å,\n// —á—Ç–æ –≤ –Ω–∞—á–∞–ª–µ –º–∞—Å—Å–∏–≤–∞ –∏–¥—É—Ç –ø–ª–∏—Ç–∫–∏ —Å–Ω–∏–∑—É, –∞ –≤ –∫–æ–Ω—Ü–µ ‚Äî —Å–≤–µ—Ä—Ö—É.\n// –≠—Ç–æ –≤–µ—Å—å–º–∞ –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.\n\n–ù–µ –º–æ–≥—É —É–ø—É—Å—Ç–∏—Ç—å game.console() ‚Äî –≠—Ç–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π\n—É–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏;\n–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –¥–≤–∏–∂–µ–Ω–∏–µ–º –±–∞—à–µ–Ω.\n\nconsole.log("–¢–µ–º –Ω–µ –º–µ–Ω–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–Ω—Å–æ–ª—å—é —Å–æ–≤—Å–µ–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.");`, "–û –≤—ã–≤–æ–¥–µ –≤ –∫–æ–Ω—Å–æ–ª—å"],
  [`–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å—Å—è —Ç–∞–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∫–∞–∫:\n‚Äî –ü–æ—á–µ–º—É —ç—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏–º–µ–Ω–Ω–æ —Ç–∞–∫, –∞ –Ω–µ –∫–∞–∫-—Ç–æ –∏–Ω–∞—á–µ.\n// –í—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç —Å—É—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –∏—Ö –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å`, "–ë–µ—Å–ø–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç"],
  [`// –ü–æ–∫–∞ –∏—Å—Ç–∏–Ω–∞ ‚Äî –∫—É—à–∞–π —è–±–ª–æ–∫–∏.\nwhile (true) eatApple();`, "üçé –Ø–±–ª–æ–∫–æ"],
  [`// –ß–µ—Ç—ã—Ä–µ –ø—É–Ω–∫—Ç–∞ –∫ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º—É —Ä–µ—à–µ–Ω–∏—é\n1. –£–±–µ—Ä–∏—Ç–µ –≤—Å–µ –ø–ª–∏—Ç–∫–∏ —Å –ø–µ—Ä–≤–æ–π –ø–∏—Ä–∞–º–∏–¥–∫–∏.\n2. –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–∞—à–Ω–∏ —Å —Å–∞–º–æ–π –±–æ–ª—å—à–æ–π –ø–ª–∏—Ç–∫–æ–π\n3. –° —ç—Ç–æ–π –±–∞—à–Ω–∏ —É–±–µ—Ä–∏—Ç–µ –≤—Å–µ –Ω–µ –Ω—É–∂–Ω—ã–µ –ø–ª–∏—Ç–∫–∏, –∞ —Å–∞–º—É—é –±–æ–ª—å—à—É—é –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫ –æ—á–∏—â–µ–Ω–Ω–æ–π –ø–∏—Ä–∞–º–∏–¥–µ.\n4. –ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ —à–∞–≥–∏ –ø–æ–∫–∞ –Ω–µ –≤—ã–∏–≥—Ä–∞–µ—Ç–µ.`, "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞\n(—Å–ø–æ–ª—å–µ—Ä—ã)"],
  [`–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ üî•\n/*\n‚ñë‚ñÑ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÑ‚ñë‚ñë‚ñÑ‚ñÑ\n‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÄ‚ñÄ‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÑ‚ñë‚ñÑ\n‚ñà‚ñë‚ïë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà\n‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÑ‚ñÑ‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÄ‚ñë‚ñÄ\n‚ñë‚ñÄ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÄ‚ñë‚ñë‚ñÄ‚ñÄ\n*/`, "–û—Ç–∫—Ä–æ–π—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ"],
  [`const game = new Game({size: 30, count: 3}).visualize();\nconst list = game.list;\n\n\n// –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–µ—Ä–≤—É—é –±–∞—à–Ω—é\nwhile (list.at(0).length)\n  game.step(0, 1);\n\n\n// –ò—â–µ–º *—ç—Ç—É* –ø–ª–∏—Ç–∫—É\nlet found = game.getGameParams().size;\n\nwhile (found > 0){\n  // –ë–∞—à–Ω—è —Å –Ω—É–∂–Ω–æ–π –Ω–∞–º –ø–ª–∏—Ç–∫–æ–π\n  let tower = list.find( arr => arr.includes(found) );\n  let towerIndex = list.indexOf( tower );\n\n  // –°–≤–æ–±–æ–¥–Ω–∞—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –±–∞—à–Ω—è\n  let shift = list.find( (arr, i) => i !== 0 && arr !== tower );\n  let shiftIndex = list.indexOf( shift );\n\n\n\n  for (let i = tower.length - tower.indexOf(found); i > 1; i--)\n    game.step( towerIndex, shiftIndex );\n\n\n\n  game.step( towerIndex, 0 );\n  found--;\n}`, "–ü–æ–ª—É—á–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –∏ —Ä–∞—Å–ø–∏—à–∏—Ç–µ—Å—å"]
];


class Library {
  constructor({ container, symbolsCount }){
    this.container = container;
    this.symbolsCount = symbolsCount;
    container.classList.add("library-container");

    this.manager = new GuidancesManager();

    container.innerHTML = this.constructor.HTML;
    this.addCodeBlocks( this.container.querySelector("#codesBlocks"), this.manager.getOpening() );
    this.addDraggableHandlers();

    this.checkDiscoverises(this.container.querySelector(".discoveries"), this.symbolsCount);
  }


  addCodeBlocks(container, opening = []){
    for (let index of opening){
      let [code, title] = GUIDANCES.at( index );
      let node = document.createElement("code");

      node.title = title;
      node.textContent = code;
      hljs.highlightElement(node);

      container.append(node);
    }
  }


  addDraggableHandlers(){
    let container = this.container.querySelector("#codesBlocks");
    const isCode = (node) => node.nodeName === "CODE" && this.container.contains(node);

    const swipeBlocks = (node, targetNode) => {
      let next = targetNode.nextElementSibling;

      if (next === node)
        next = next.previousElementSibling;

      container.insertBefore(targetNode, node);
      container.insertBefore(node, next);

      this.manager.update( this.container.querySelector("#codesBlocks") );
    }

    let ephemeral, codeNode;

    const moveHandler  = (mouseEvent) => {
      let { x: containerX, y: containerY } = container.getBoundingClientRect();
      containerY -= container.scrollTop;

      let { width, height } = ephemeral.getBoundingClientRect();

      ephemeral.style.top  = `${ mouseEvent.clientY - containerY - height / 2 }px`;
      ephemeral.style.left = `${ mouseEvent.clientX - containerX - width  / 2 }px`;
    };


    const enterHandler = (mouseEvent) => {
      let targetNode = mouseEvent.path.find(isCode);
      if (!targetNode || targetNode === codeNode)
        return;

      targetNode.classList.add("dragzone");
    };


    const leaveHandler = (mouseEvent) => {
      let targetNode = mouseEvent.path.find(isCode);
      if (!targetNode || targetNode === codeNode)
        return;

      targetNode.classList.remove("dragzone");
    };




    container.addEventListener("mousedown", async mouseEvent => {
      codeNode = mouseEvent.path.find(isCode);
      if (!codeNode)
        return;

      ephemeral = codeNode.cloneNode(true);
      ephemeral.classList.add("ephemeral");
      container.append(ephemeral);

      codeNode.classList.add("dragged");

      container.addEventListener("mousemove", moveHandler);
      container.addEventListener("mouseover", enterHandler);
      container.addEventListener("mouseout",  leaveHandler);


      let mouseUpEvent = await new Promise(res => document.body.addEventListener("mouseup", res, {once: true}));


      container.removeEventListener("mousemove", moveHandler);
      container.removeEventListener("mouseover", enterHandler);
      container.removeEventListener("mouseout",  leaveHandler);

      codeNode.classList.remove("dragged");
      ephemeral.remove();

      let targetNode = mouseUpEvent.path.find(isCode);
      if (!targetNode || targetNode === codeNode)
        return;

      targetNode.classList.remove("dragzone");
      swipeBlocks(codeNode, targetNode);
    });
  }


  displayTargetHTML(){
    let target = this.manager.getSymbolsTarget() - this.symbolsCount;

    if (target < 0)
      return "";

    if (this.manager.getOpening().length === GUIDANCES.length)
      return "";

    return `<center>–ù–∞–ø–∏—à–∏—Ç–µ –µ—â—ë ${ ending(target, "—Å–∏–º–≤–æ–ª", "–æ–≤", "", "–∞") }, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏</center>`
  }


  checkDiscoverises(container, count){
    new Discoveries({ library: this, container })
      .checkReady(count)
      .init();
  }


  static HTML = `
    <span><small>–ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –Ω–µ–ª—å–∑—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å. T_T<br>–†—É—á–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –í—ã –¥–µ–ª–∞–µ—Ç–µ.</small></span>
    <br>
    <main id = "codesBlocks"></main>
    <hr>
    <br>
    <div class = "discoveries"></div>
  `
}





class GuidancesManager {
  #opening;
  constructor(){
    this.#opening = JSON.parse( localStorage.getItem("guidances") ) || this.constructor.BASIC_GUIDANCES;

  }


  getOpening(){
    return this.#opening;
  }


  getSymbolsTarget(){
      return ~~( Math.pow(1.22106, this.#opening.length + 1) * 65 );
  }


  update( container ){
    let childList = container.children;
    let codeNodes = [...childList].filter(node => node.nodeName === "CODE");


    for (let i = 0; i < codeNodes.length; i++){
      const title = codeNodes[i].title;
      const block = GUIDANCES[ this.#opening[i] ];

      if ( block === undefined ){
        this.#opening.push( GUIDANCES.findIndex(([code, id]) => id === title) );
        continue;
      }


      if ( block[1] === title )
        continue;

      // swipe
      if ( block[1] !== title ) {
        let swipeIndex = this.#opening.findIndex( index => GUIDANCES.at(index)[1] === title );
        this.#opening[i] = this.#opening.splice(swipeIndex, 1, this.#opening[i]).at(0);
      }

    }

    localStorage.setItem("guidances", JSON.stringify(this.#opening));
  }


  static BASIC_GUIDANCES = [0, 1, 2, 3, 4];
}




class Discoveries {
  constructor({ library, container }){
    this.library   = library;
    this.container = container;

    let opening = library.manager.getOpening();
    let unavailable = GUIDANCES.filter( (e, i) => !opening.includes(i) )
      .slice(0, 3);

    this.buttons = unavailable.map(([code, title]) => {
      let node = document.createElement("div");
      node.textContent = title;
      node.title = "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å";
      return node;
    });
  }


  checkReady(count){
    let target = this.library.manager.getSymbolsTarget();
    if (count < target)
      this.lacks = target - count;

    return this;
  }


  init(){
    if ("lacks" in this)
      return this.displayLacks();

    let isMaximum = this.library.manager.getOpening().length === GUIDANCES.length;
    if (isMaximum)
      return;

    this.clickHandler = this.#clickHandler.bind(this, this.library);
    this.container.addEventListener("click", this.clickHandler);
    this.buttons.forEach(node => this.container.append(node));
  }


  displayLacks(){
    let node = document.createElement("span");
    node.textContent = `–ù–∞–ø–∏—à–∏—Ç–µ –µ—â—ë ${ ending(this.lacks, "—Å–∏–º–≤–æ–ª", "–æ–≤", "", "–∞") }, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏`;
    this.container.append(node);
  }


  #clickHandler(library, clickEvent){
    if (clickEvent.target.nodeName === "SECTION")
      return;

    this.container.removeEventListener("click", this.clickHandler);

    this.container.innerHTML = "";
    let index = GUIDANCES.findIndex(([code, title]) => title === clickEvent.target.textContent);

    if (!~index)
      throw new Error("unknow Title");

    let codesBlocks = library.container.querySelector("#codesBlocks");

    library.addCodeBlocks(codesBlocks, [index]);
    library.manager.update( codesBlocks );

    library.checkDiscoverises(this.container, library.symbolsCount);
  }

  static HTML = `
      <center>–•–æ—Ä–æ—à–æ –ø–æ–¥—É–º–∞–π—Ç–µ –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ —á—Ç–æ-—Ç–æ –≤—ã–±—Ä–∞—Ç—å</center>
      { buttons }
  `;
}
